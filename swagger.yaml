openapi: 3.0.4
info:
  title: UniLink Api
  description: |
    This is the API specification for the UniLink app. 
    ![University list screen](/UniLinkAPI/universities.png)
  version: 1.0.0
paths:
  /university:
    put:
      tags:
        - university
      summary: Update an existing university.
      description: Update an existing university by Id.
      operationId: updateUniversity
      requestBody:
        description: Update an existent university
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/University'
          application/xml:
            schema:
              $ref: '#/components/schemas/University'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/University'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/University'
            application/xml:
              schema:
                $ref: '#/components/schemas/University'
        '400':
          description: Invalid ID supplied
        '404':
          description: University not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - unilink_auth:
            - write:university
            - read:university
    post:
      tags:
        - university
      summary: Add a new university
      description: Add a new university
      operationId: addUniversity
      requestBody:
        description: Create a new university
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/University'
          application/xml:
            schema:
              $ref: '#/components/schemas/University'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/University'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/University'
            application/xml:
              schema:
                $ref: '#/components/schemas/University'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - unilink_auth:
            - write:universities
            - read:universities
   
  /university/:
    get:
      tags:
        - university
      summary: List of universities
      description: Returns a single university.
      operationId: getUniversities
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversityArray'
            application/xml:
              schema:
                $ref: '#/components/schemas/UniversityArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - unilink_auth:
            - write:universities
            - read:universities
            
  /university/{id}:
    get:
      tags:
        - university
      summary: Find university by ID.
      description: Returns a single university.
      operationId: getUniversityById
      parameters:
        - name: id
          in: path
          description: ID of university to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/University'
            application/xml:
              schema:
                $ref: '#/components/schemas/University'
        '400':
          description: Invalid ID supplied
        '404':
          description: University not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - unilink_auth:
            - write:universities
            - read:universities
  /person:
    post:
      tags:
        - person
      summary: Create person.
      description: This can only be done by the logged in user.
      operationId: createPerson
      requestBody:
        description: Created person object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
          application/xml:
            schema:
              $ref: '#/components/schemas/Person'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /person/{id}:
    get:
      tags:
        - person
      summary: Get person by person id.
      description: Get person detail based on id.
      operationId: getPersonById
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched. Use user1 for testing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid username supplied
        '404':
          description: Person not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - person
      summary: Update person resource.
      description: This can only be done by the logged in user.
      operationId: updatePerson
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
          application/xml:
            schema:
              $ref: '#/components/schemas/Person'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: Person not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - person
      summary: Delete person resource.
      description: This can only be done by the logged in user.
      operationId: deletePerson
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Person deleted
        '400':
          description: Invalid id supplied
        '404':
          description: Person not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Person:
      required:
        - id
        - firstName
        - lastName
      type: object
      properties:
        id:
          type: string
          example: asdbsrsbdie102xcbfs
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
        universityIds:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: universityId
      xml:
        name: person
    University:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          example: asdbsrsbdie102xcbfs
        name:
          type: string
          example: Harvard
        presidentId:
          type: string
          description: Person id of the President of the university
          example: asdbsrsbdie102xcbfs
      xml:
        name: university
    UniversityArray:
      type: array
      items: 
        $ref: '#/components/schemas/University'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  requestBodies:
    Person:
      description: Person object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Person'
        application/xml:
          schema:
            $ref: '#/components/schemas/Person'
  securitySchemes:
    unilink_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://unilink.com/oauth/authorize
          scopes:
            "write:universities": modify universities
            "read:universities": read universities
    api_key:
      type: apiKey
      name: api_key
      in: header